package com.weiguang.controller;

import com.weiguang.pojo.Friend;
import com.weiguang.pojo.Users;
import com.weiguang.service.FriendService;
import com.weiguang.service.UsersService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.Map;

@Controller
@ResponseBody
public class FriendController {
/*
* 添加朋友
*
* */
    @Resource
    private FriendService friendService;
    @Resource
    private UsersService usersService;
    @RequestMapping(method = RequestMethod.POST,value = "addFrinds")
    //friendID是被添加的微光号
    public Map addFriends(int uid,int friendid){
        Users users = usersService.findfriendbywid(friendid);
        Users users2 = usersService.findbyid(uid);
        Integer friendId = users.getUserid();
        /*
        * 判断friendId是否已经为该用户好友(改进)
        * */
        Friend friend = new Friend();
        friend.setFriendid(friendId);
        friend.setUid(uid);
        friend.setState(0);
        friend.setShowblog(1);
        int i = friendService.insert(friend);
        if(i>0){
            /*
            * 更改uID与wID的朋友数量
            * */
            users.setFriendcount(users.getFriendcount()+1);
            users2.setFriendcount(users2.getFriendcount()+1);
            int k1= usersService.updateByPrimaryKey(users2);
            int k2 = usersService.updateByPrimaryKey(users);
            if(k1>0&k2>0){
                HashMap map = new HashMap();
                map.put("code",0);
                map.put("msg","成功");
                return map;
            }
        }
        HashMap map = new HashMap();
        map.put("code",0);
        map.put("msg","失败");
        return map;
    }

    /*
     * 从拉黑动态列表中移除
     *
     * */
    @RequestMapping(method = RequestMethod.GET,value = "removefromlist")
    public Map removelist(int userid,int uid){
        //根据用户id好友id修改blog状态
        Friend friend = friendService.findfriend(userid, uid);
        friend.setShowblog(1);

        //修改friend
        int k = friendService.updateByPrimaryKey(friend);
        HashMap map = new HashMap<>();
        if(k>0){
            map.put("code",0);
            map.put("msg","成功");
            return map;
        }
        map.put("code",0);
        map.put("msg","失败");

        return map;
    }

@RequestMapping(method = RequestMethod.POST,value = "/selectFriend")
    public Map selectFriend(int uid){
        List<Friend> friendidList = friendService.selectByUid(uid);
        List<Users> friendList = new ArrayList<>();
        List list = new ArrayList();
        for (Friend friend : friendidList) {
            Users users = usersService.findbyid(friend.getFriendid());
            FriendInfo friendInfo = new FriendInfo();
            friendInfo.setUserid(users.getUserid());
            friendInfo.setName(users.getName());
            friendInfo.setIcon(users.getIcon());
            friendInfo.setGender(users.getGender());
            friendInfo.setAddtime(friend.getAddtime());
           list.add(friendInfo);
        }
        Map map = new HashMap();
        map.put("code",0);
        map.put("msg","成功");
        map.put("data",list);
        return map;
    }

    //查询好友
    @RequestMapping(method = RequestMethod.GET,value = "findAllFriends")
    public Map selectAllFriends(@RequestParam(defaultValue = "1") int index, HttpSession session){
        int userID=(int)session.getAttribute("userID");
        PageInfo pageInfo=friendService.selectFriendByID(index,StatusUtil.PAGESIZE,userID);
        Map map=new HashMap();
        map.put("code",0);
        map.put("data",pageInfo);
        return map;
    }

    //查询不看动态的好友
    @RequestMapping(method = RequestMethod.POST,value = "selectFriend")
    public Map selectCover(@RequestParam(defaultValue = "1") int index,HttpSession session){
        int userID=(int)session.getAttribute("userID");
        PageInfo pageInfo=friendService.selectCoverByID(index,StatusUtil.PAGESIZE,userID);
        Map map=new HashMap();
        map.put("code",0);
        map.put("data",pageInfo);
        return map;
    }
    //比心
    @RequestMapping(method = RequestMethod.POST,value = "/addfriend")
    public DataView addFriend(Friend friend){
      int i=  friendService.insert(friend);
        if (i>0){
          DataView<Friend> friendDataView = new DataView<>();
            friendDataView.setCode(0);
            friendDataView.setMsg("成功");
          return  friendDataView;
      }
      return null;

    }


}
